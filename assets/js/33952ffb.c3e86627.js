"use strict";(self.webpackChunktexter_docs=self.webpackChunktexter_docs||[]).push([[843],{4359:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"YAML/Types/Func/System/Check Working Hours","title":"Check Working Hours","description":"What does it do?","source":"@site/docs/YAML/Types/Func/System/Check Working Hours.md","sourceDirName":"YAML/Types/Func/System","slug":"/YAML/Types/Func/System/Check Working Hours","permalink":"/texterdocs/docs/YAML/Types/Func/System/Check Working Hours","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/YAML/Types/Func/System/Check Working Hours.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sensitive Session","permalink":"/texterdocs/docs/YAML/Types/Func/Chat/Sensitive Session"},"next":{"title":"Keyword Route","permalink":"/texterdocs/docs/YAML/Types/Func/System/Keyword Route"}}');var r=s(4848),t=s(8453);const o={},c="Check Working Hours",d={},l=[{value:"What does it do?",id:"what-does-it-do",level:3},{value:"1. Syntax",id:"1-syntax",level:2},{value:"must include:",id:"must-include",level:4},{value:"required params",id:"required-params",level:3},{value:"optional params",id:"optional-params",level:3},{value:"2. Example",id:"2-example",level:2}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"check-working-hours",children:"Check Working Hours"})}),"\n",(0,r.jsx)(n.h3,{id:"what-does-it-do",children:"What does it do?"}),"\n",(0,r.jsx)(n.p,{children:"Checks if we are in working hours (by defined ones)"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-syntax",children:"1. Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"<node name>:\n  type: func\n  func_type: system\n  func_id: checkWorkingTime\n  on_complete: <on working time node>\n  on_failure: <outside working time node>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"must-include",children:"must include:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"working_time:\n  <start day>-<end day>: <start time>-<end time>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"required-params",children:"required params"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," type of the node"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"func_type"})," here it will be a system function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"func_id"})," what function are we calling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"on_complete"})," next function to do if its ",(0,r.jsx)(n.em,{children:"in"})," working hours (can be either a node or a function)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"on_failure"})," next function to do if its not in working hours (can be either a node or a function)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"optional-params",children:"optional params"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"params"}),': can inclue working time by names (params will include sub parameter "type")',"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," sub parameter will choos name"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-example",children:"2. Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"working_time:\n  sun-thu: 08:00-17:00\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  check_working_hours:\n    type: func\n    func_type: system\n    func_id: checkWorkingTime\n    on_complete: main_menu\n    on_failure: outside_working_hours\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"working_time:\n  office:\n    sun-thu: 08:00-17:00\n  home_department:\n    sun-thu: 19:00-20:00\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  check_working_hours_home:\n    type: func\n    func_type: system\n    func_id: checkWorkingTime\n    params:\n      type: home_department\n    on_complete: main_menu\n    on_failure: outside_working_hours\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);