"use strict";(self.webpackChunktexter_docs=self.webpackChunktexter_docs||[]).push([[926],{6238:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"YAML/Adapters/Rapid/Schedule Appointemnt","title":"Schedule Appointment","description":"What is it?","source":"@site/docs/YAML/Adapters/Rapid/Schedule Appointemnt.md","sourceDirName":"YAML/Adapters/Rapid","slug":"/YAML/Adapters/Rapid/Schedule Appointemnt","permalink":"/texterdocs/docs/YAML/Adapters/Rapid/Schedule Appointemnt","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/YAML/Adapters/Rapid/Schedule Appointemnt.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Rapid","permalink":"/texterdocs/docs/YAML/Adapters/Rapid/"},"next":{"title":"Tazman","permalink":"/texterdocs/docs/YAML/Adapters/Tazman/"}}');var c=n(4848),s=n(8453);const r={},d="Schedule Appointment",i={},a=[{value:"What is it?",id:"what-is-it",level:3},{value:"getBranches",id:"getbranches",level:3},{value:"getDepartments",id:"getdepartments",level:3},{value:"getServices",id:"getservices",level:3},{value:"getDoctors",id:"getdoctors",level:3},{value:"getAvailableSlots",id:"getavailableslots",level:3},{value:"scheduleAppointment",id:"scheduleappointment",level:3},{value:"Example (getDoctors + count + store)",id:"example-getdoctors--count--store",level:2}];function l(e){const t={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"schedule-appointment",children:"Schedule Appointment"})}),"\n",(0,c.jsx)(t.h3,{id:"what-is-it",children:"What is it?"}),"\n",(0,c.jsx)(t.p,{children:"A way to schedule an appointment through whatsapp bot"}),"\n",(0,c.jsxs)(t.admonition,{type:"tip",children:[(0,c.jsx)(t.p,{children:"After each step"}),(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsx)(t.li,{children:"check count (0 - not found, 1 - no need to ask client to choose)"}),"\n",(0,c.jsx)(t.li,{children:"store the value that has been selected"}),"\n"]})]}),"\n",(0,c.jsx)(t.h3,{id:"getbranches",children:"getBranches"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'get_branches:\n  type: func\n  func_type: crm\n  func_id: getBranches\n  params:\n    branchId : <number> // optional\n    branchIdField: "branchID" // optional, default is "branchID"\n    branchTitleField: "name" // optional, defualt is "name"\n  on_complete: check_branch_count\n'})}),"\n",(0,c.jsx)(t.h3,{id:"getdepartments",children:"getDepartments"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'get_departments:\n  type: func\n  func_type: crm\n  func_id: getDepartments\n  params:\n    branchId: "%DATA_BOT_NODE=select_branch.crm_id%" // optional\n    departmentId: <number> // optional\n  on_complete: check_department_count\n'})}),"\n",(0,c.jsx)(t.h3,{id:"getservices",children:"getServices"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'get_services:\n  type: func\n  func_type: crm\n  func_id: getServices\n  params:\n    departmentId: "%DATA_BOT_NODE=select_department.crm_id%" // optional\n    doctorId: "%DATA_BOT_NODE=select_doctor.crm_id%" // optional\n  on_complete: check_services_count\n'})}),"\n",(0,c.jsx)(t.h3,{id:"getdoctors",children:"getDoctors"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'get_doctors:\n  type: func\n  func_type: crm\n  func_id: getDoctors\n  params:\n    serviceId: "%DATA_BOT_NODE=select_service.crm_id%" // **mandatory**\n  on_complete: check_doctors_count\n'})}),"\n",(0,c.jsx)(t.h3,{id:"getavailableslots",children:"getAvailableSlots"}),"\n",(0,c.jsxs)(t.p,{children:["datesRangeFrom & datesRangeFrom refers to amount of days from TODAY ahead",(0,c.jsx)("br",{}),"\nso for example if you want to get time slots for the following week:",(0,c.jsx)("br",{}),"\ndatesRangeFrom: 0",(0,c.jsx)("br",{}),"\ndatesRangeTo: 1",(0,c.jsx)("br",{})]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'get_time_slots:\n  type: func\n  func_type: crm\n  func_id: getAvailableSlots\n  params:\n    serviceId: "%DATA_BOT_NODE=select_service.crm_id%"\n    datesRangeFrom: <amount of days to start from>\n    datesRangeTo: <amount of days to end>\n    departmentId: "%DATA_BOT_NODE=select_department.crm_id%"\n    doctorId: "%DATA_BOT_NODE=select_doctor.crm_id%"\n    onlyGoodSlots: true // optional\n    limit: 2 // optional\n    offset: 2 // optional\n    serviceDuration: 15 // optional\n  on_complete: check_slots_count\n'})}),"\n",(0,c.jsx)(t.h3,{id:"scheduleappointment",children:"scheduleAppointment"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'schedule_appointment:\n  type: func\n  func_type: crm\n  func_id: scheduleAppointment\n  params:\n    startTime : "%DATA_BOT_NODE=select_slot.startTime%"\n    endTime : "%DATA_BOT_NODE=select_slot.endTime%"\n    doctorId: "%DATA_BOT_NODE=select_doctor.crm_id%"\n    departmentId : "%DATA_BOT_NODE=select_department.crm_id%"\n    serviceId : "%DATA_BOT_NODE=select_service.crm_id%"\n  on_complete: confirm_message\n'})}),"\n",(0,c.jsx)(t.h2,{id:"example-getdoctors--count--store",children:"Example (getDoctors + count + store)"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'get_doctors:\n  type: func\n  func_type: crm\n  func_id: getDoctors\n  params:\n    serviceId: "%state:store.serviceId%"\n    departmentId: "%state:store.departmentId%"\n  on_complete: check_doctors_count\n  on_failure: agent_handoff\n'})}),"\n",(0,c.jsxs)(t.blockquote,{children:["\n",(0,c.jsx)(t.p,{children:"here it will go to select_doctor (on_complete) only if there is more than 1 doctor (0 doctors has been covered by on_failure in privous node)"}),"\n"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'check_doctors_count:\n  type: func\n  func_type: system\n  func_id: botStateSplit\n  params:\n    "1": store_doctor_id\n    crmField: doctorsCount\n  on_complete: select_doctor\n'})}),"\n",(0,c.jsxs)(t.blockquote,{children:["\n",(0,c.jsx)(t.p,{children:"storing the value is different between single & multiple options"}),"\n"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'store_doctor_id_single:\n  type: func\n  func_type: system\n  func_id: storeValue\n  params:\n    key: doctorId\n    value: "%chat:crmData.doctors.0.id%"\n  on_complete: store_doctor_name\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'select_doctor:\n  type: prompt\n  prompt_type: choice\n  messages:\n    - "\u05d0\u05d9\u05d6\u05d4 \u05e8\u05d5\u05e4\u05d0 \u05ea\u05e8\u05e6\u05d4 \u05e9\u05d9\u05d8\u05e4\u05dc \u05d1\u05da?"\n  choices:\n    - list: "%DATA_CRM=doctors%"\n    - title: "\u05de\u05e2\u05d1\u05e8 \u05dc\u05e0\u05e6\u05d9\u05d2"\n      on_select: agent_handoff\n    - title: "\u05d7\u05d6\u05e8\u05d4 \u05dc\u05ea\u05e4\u05e8\u05d9\u05d8 \u05d4\u05e7\u05d5\u05d3\u05dd"\n      on_select: select_service\n  on_complete: store_doctor_id_choice\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:'store_doctor_id_choice:\n  type: func\n  func_type: system\n  func_id: storeValue\n  params:\n    key: doctorId\n    value: "%state:node.select_doctor.crm_id%"\n  on_complete: store_doctor_name\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var o=n(6540);const c={},s=o.createContext(c);function r(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);