"use strict";(self.webpackChunktexter_docs=self.webpackChunktexter_docs||[]).push([[780],{8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var c=n(6540);const s={},o=c.createContext(s);function r(e){const t=c.useContext(o);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),c.createElement(o.Provider,{value:t},e.children)}},9225:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>i});const c=JSON.parse('{"id":"Adapters/Rapid/Schedule Appointemnt","title":"Schedule Appointment","description":"What is it?","source":"@site/docs/Adapters/Rapid/Schedule Appointemnt.md","sourceDirName":"Adapters/Rapid","slug":"/Adapters/Rapid/Schedule Appointemnt","permalink":"/texterdocs/docs/Adapters/Rapid/Schedule Appointemnt","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Adapters/Rapid/Schedule Appointemnt.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Rapid","permalink":"/texterdocs/docs/Adapters/Rapid/"},"next":{"title":"Tazman","permalink":"/texterdocs/docs/Adapters/Tazman/"}}');var s=n(4848),o=n(8453);const r={},d="Schedule Appointment",a={},i=[{value:"What is it?",id:"what-is-it",level:3},{value:"getBranches",id:"getbranches",level:3},{value:"getDepartments",id:"getdepartments",level:3},{value:"getServices",id:"getservices",level:3},{value:"getDoctors",id:"getdoctors",level:3},{value:"getAvailableSlots",id:"getavailableslots",level:3},{value:"scheduleAppointment",id:"scheduleappointment",level:3}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"schedule-appointment",children:"Schedule Appointment"})}),"\n",(0,s.jsx)(t.h3,{id:"what-is-it",children:"What is it?"}),"\n",(0,s.jsx)(t.p,{children:"A way to schedule an appointment through whatsapp bot"}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsx)(t.p,{children:"After each step"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"check count (0 - not found, 1 - no need to ask client to choose)"}),"\n",(0,s.jsx)(t.li,{children:"store the value that has been selected"}),"\n"]})]}),"\n",(0,s.jsx)(t.h3,{id:"getbranches",children:"getBranches"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'get_branches:\n  type: func\n  func_type: crm\n  func_id: getBranches\n  params:\n    branchId : <number> // optional\n    branchIdField: "branchID" // optional, default is "branchID"\n    branchTitleField: "name" // optional, defualt is "name"\n  on_complete: check_branch_count\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getdepartments",children:"getDepartments"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'get_departments:\n  type: func\n  func_type: crm\n  func_id: getDepartments\n  params:\n    branchId: "%DATA_BOT_NODE=select_branch.crm_id%" // optional\n    departmentId: <number> // optional\n  on_complete: check_department_count\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getservices",children:"getServices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'get_services:\n  type: func\n  func_type: crm\n  func_id: getServices\n  params:\n    departmentId: "%DATA_BOT_NODE=select_department.crm_id%" // optional\n    doctorId: "%DATA_BOT_NODE=select_doctor.crm_id%" // optional\n  on_complete: check_services_count\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getdoctors",children:"getDoctors"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'get_doctors:\n      type: func\n      func_type: crm\n      func_id: getDoctors\n      params:\n        serviceId: "%DATA_BOT_NODE=select_service.crm_id%" // **mandatory**\n      on_complete: check_doctors_count\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getavailableslots",children:"getAvailableSlots"}),"\n",(0,s.jsxs)(t.p,{children:["datesRangeFrom & datesRangeFrom refers to amount of days from TODAY ahead",(0,s.jsx)("br",{}),"\nso for example if you want to get time slots for the following week:",(0,s.jsx)("br",{}),"\ndatesRangeFrom: 0",(0,s.jsx)("br",{}),"\ndatesRangeTo: 1",(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'get_time_slots:\n      type: func\n      func_type: crm\n      func_id: getAvailableSlots\n      params:\n        serviceId: "%DATA_BOT_NODE=select_service.crm_id%"\n        datesRangeFrom: <amount of days to start from>\n        datesRangeTo: <amount of days to end>\n        departmentId: "%DATA_BOT_NODE=select_department.crm_id%"\n        doctorId: "%DATA_BOT_NODE=select_doctor.crm_id%"\n        onlyGoodSlots: true // optional\n        limit: 2 // optional\n        offset: 2 // optional\n        serviceDuration: 15 // optional\n      on_complete: check_slots_count\n'})}),"\n",(0,s.jsx)(t.h3,{id:"scheduleappointment",children:"scheduleAppointment"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'schedule_appointment:\n    type: func\n    func_type: crm\n    func_id: scheduleAppointment\n    params:\n      startTime : "%DATA_BOT_NODE=select_slot.startTime%"\n      endTime : "%DATA_BOT_NODE=select_slot.endTime%"\n      doctorId: "%DATA_BOT_NODE=select_doctor.crm_id%"\n      departmentId : "%DATA_BOT_NODE=select_department.crm_id%"\n      serviceId : "%DATA_BOT_NODE=select_service.crm_id%"\n    on_complete: confirm_message\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);